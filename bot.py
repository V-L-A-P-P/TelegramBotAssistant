import telebotimport threadingimport MyFileWorkerimport WithDataWorkerimport TemporaryValuesKeeperimport WithProblemsWorkerimport MessagesHandlerimport BackgroundProcessPerformer# TOKEN = "2067410069:AAFKW4DZBnfBe0TgjJj0XVZgtTpAv99GQ-o"# TOKEN = "2099803367:AAGUn8M-X9_ivu2a3i76irQOGt5ryKkQpEs" not for use# TOKEN = "2054566773:AAE2sa4UmBWR8L8IbdT3CgTZo9v1NIzgVGg"# test for hope# TOKEN = "2034775644:AAHxVkYH1L8F6WPcErp0e7iNT82TYxAlNdM"  # test for me#TOKEN = "5004761639:AAF6eincMdb2JSgKtw7-aZJRyYwaEpgYAmg"NEXT_REMINDER = MyFileWorker.load_reminder_time()DATA_ITEMS = MyFileWorker.load_data_items_const()BOT = telebot.TeleBot(MyFileWorker.load_bot_token())OPERATOR_DATA = MyFileWorker.load_data_of_operator()def main():    temporary_values_keeper = TemporaryValuesKeeper.TemporaryValuesKeeper()    with_data_worker = WithDataWorker.WithDataWorker(BOT,                                                     temporary_values_keeper)    with_problems_worker = WithProblemsWorker.WithProblemsWorker(BOT,                                                                 temporary_values_keeper)    messages_handler = MessagesHandler.MessagesHandler(BOT,                                                       with_data_worker,                                                       with_problems_worker,                                                       temporary_values_keeper)    background_process_performer = BackgroundProcessPerformer.BackgroundProcessPerformer(BOT,                                                                                         with_data_worker,                                                                                         with_problems_worker,                                                                                         temporary_values_keeper)    # Catching the "/start" command.    @BOT.message_handler(commands=["start"])    def answer_to_start_command(message):        messages_handler.reply_to_start_command(message)    # Catching the "/done" command.    @BOT.message_handler(commands=["done"])    def answer_to_done_command(message):        text = message.text.split(' ')        if OPERATOR_DATA['chat_id'] == "":            print(" Введите данные оператора в приложении")        elif OPERATOR_DATA['chat_id'] == str(message.chat.id):            if len(text) == 2:                if text[1].isdigit():                    with_problems_worker.mark_problem_completed(message, int(text[1]))                else:                    BOT.send_message(str(message.chat.id),                                     "Неккоректная форма команды\nПопробуйте так (Без кавычек):\n/done номер_заявки")            else:                BOT.send_message(str(message.chat.id),                                 "Неккоректная форма команды\nПопробуйте так:\n/done номер_заявки")    # Catching messages of type "text".    @BOT.message_handler(content_types=["text"])    def answer_to_text(message):        messages_handler.reply_to_text(message)    # Catching messages of type "photo"    @BOT.message_handler(content_types=["photo"])    def answer_to_photo(message):        messages_handler.reply_to_photo(message)    # Catching messages of type "document"    @BOT.message_handler(content_types=["document"])    def answer_to_document(message):        messages_handler.reply_to_document(message)    background_process_performer.background_thread = threading.Thread(        target=background_process_performer.do_background_process)    background_process_performer.background_thread.start()    print("Bot launched")    BOT.infinity_polling(timeout=10, long_polling_timeout=5)if __name__ == "__main__":    main()